#★★★★파이썬★★★★
# 
# 
#  앞으로의 자료구조 및 알고리즘에선 파이썬의 
# 고급문법을 사용하기 보단 자료구조의 개념에 대하여 알아갈거다

# 따라서 복잡도를 분석하고자 할 때, 문법으로 해결한다는 생각은 주의해야한다
    # 예를 들어 in 연산자와 탐색


# 컬렉션 자료형
    # 시퀀스 형-> 순서 있음
        # 문자열
        # 리스트-> 유일하게 수정가능한 시퀀스형형
        # 튜플
    # 맵핑형: 딕션너리-> 수정가능
    # 집합형: 세트(중복불가가)-> 수정 가능

# C언어의 배열(array)와 파이썬의 리스트의 차이
#     공통점: 순서있는 원소 나열, 수정가능, 인덱스 사용
#     차이점: 배열 단일 자료형, 리스트는 혼용 가능,
#             배열은 단순 데이터형이지만, 리스트는 클래스로 되어 있어 추가적인 기능이 많음
# + 파이썬은 자료형이 모두 클래스로 되어있다.
# -> 메서드를 통해 추가적인 기능이 많다. (리스트는 크기, 슬라이스의 정렬 등의 추가적인 기능이 많다)

# ★★★★★★파이썬의 자료형이 모두 클래스인 것과 메서드로 이루어진 클래스 학습하기★★★★★★

# 틈새 상식: vs는 c++컴파일러이다. 

# 디폴트 인수 -> C문법엔 없다.??-> 보충

# ★ 모듈과 이름공간(namespace)
    # 다른사람이나 자신이 만든 모듈을 불러와서 사용
    # 형식(근데 함수?가 맞나?? 클래스아닌감?)
        # from 패키지 import 모듈-> 패키지는 폴더+ 혹여 폴더가 다중이라면 '.'으로로 cd역할이 가능
        # from 모듈 import (해당 모듈 내 특정 함수(?)): 특정 .py 파일의 함수(?) 호출
        # from 모듈 import *-> 특정 모듈(.py 파일) 내부의 모든 함수(?) 가져옴

# --------------------------------------------------------------------------------------------------------------------------

# ★★★★자료구조★★★★

# 리스트와 집합
    # 리스트
        # 리스트란?: 가장 자유로운 선형자료구조
        # 선형 리스트: 순서 자료구조
    # 집합
        # 순서 없음
        # 중복을 허용 안함-> 선형 자료구조 아님

# 리스트의 추상자료형(ADT)
    # 데이터
        # '같은 유형의의 요소들'의  '순서'있는 모임
    # 연산
        # 현재의 상태를 바꾸는 경우와 안바꾸는 경우가 나뉜다


# 배열 리스트와 연결 리스트의 특징
    # 삽입&삭제의 경우 
        # 한칸을 밀면 나머지가 모두 밀려
            # ★★★★93pg 참고!!!!!!!!!!!!★★★★★★★★


# 함수 버전 배열
    # 문제점: array 변수명의 리스트를 2개 이상이 불가
    # -> 그러므로 함수의 매개변수에 넘겨준다?
    # -> 하지만 불편(?)-> 그래서 클래스로 구현하면 만들기는 self로 인해 불편하지만
    # 만들어놓으면 편안~ ★★★★★★공부★★★★★★
        # 107pg 전후

# .............

# def factorial(n):
#     result=1
#     for k in range(1,n+1):
#         result=result*k
#     return result

# def rec_factorial(n):
#     if n==1:
#         return 1
#     else:
#         return n*rec_factorial(n-1   )
    

def hanoi_tower(n, fr, tmp, to):
    if (n==1):
        print("원판1: %s-->%s"%(fr,to))
    else:
        hanoi_tower(n-1,fr,to,tmp)
        print("원판 %d: %s-->%s"%(n,fr,to))
        hanoi_tower(n-1,tmp,fr,to)

hanoi_tower(4, 'a','b','c')
