# programming!=coding
# 코더->할당된 코드를 작성하는 역할
# 프로그래머->문제에 대해 숙고하고 할당시키는 역할

# 순차적 프로그램: 묶음단위로 실행-> 함수(function)
# 객체지향프로그램: 일을 수행할 객체들의 상호작용


# 문장을 구성하는 단어(명령어의 기본단위는 문장)
# 키워드(=예약어)
# 변수
# 값
# 표현(expression) 혹은 표현식
# 함수
# 한 줄은 한 문장이다(대부분의 경우에서....)
# 문장과 표현의 구별이나 표현의 정확힌 의미*****
# 함수와 메서드 비교:
# 동작주체: 함수는 수동적(사용자가 시키는 명령어의 모음) / 메서드는 주체적(잭체가 수행하는 동작의 모음)
# 처리대상: 함수는 외부에서 주어짐 / 메소드는 메소드는 소유한 객체, 즉 자기자신
# print()에서 괄호 안에 들어가는 것은 인수(argument)라고 한다.


# 메서드의 형태: 객체.메서드()
# 예)upper()
# print('abc'.upper())
# "."의 의미: 왼쪽 안에 있는~

# 보통의 함수 정의로 만들어진 함수는 하나의 인수도 처리하기 힘들다.
# print()의 경우는 예외
# 각설하고 기존의 함수를 얼마나 능숙하게 활용하는가가 휼륭한 프로그래머의 당락을 가른다.

# 파이썬은 함수 또는 객체로 구성

# 기존의 함수: 내장함수(모듈을 import하지 않고 사용 가능한 파이썬 함수)
# 외부의 함수: 기존에 설치된 것과 install해야되는 것('오픈소스'의 핵심)

# 내장함수: 70개의 내장함수
# 외장함수: 라이브러리, 모듈, 페키지(페키지>모듈)
# 모듈을 가져와라=import 명령어
# 코드블럭=들여쓰기 세트(파이썬에게만 해당 다른 코드는 중괄호를 응용하여 들여쓰기를 표현한다.)
